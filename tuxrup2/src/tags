!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/buster/Documents/tuxrup/tuxrup2/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
CALLBACKS_H	callbacks.h	/^#define CALLBACKS_H$/;"	d
CSS_H	css.h	/^#define CSS_H /;"	d
GLOBALS_H	globals.h	/^#define GLOBALS_H$/;"	d
IO_H	io.h	/^#define IO_H$/;"	d
PROPERTIES_H	properties.h	/^#define PROPERTIES_H$/;"	d
SYMBOLS_H	symbols.h	/^#define SYMBOLS_H$/;"	d
UTIL_H	util.h	/^#define UTIL_H$/;"	d
__anona45c209f0108	symbols.c	/^typedef struct {$/;"	s	file:
active_widget	properties.c	/^GtkWidget* active_widget = NULL;$/;"	v	typeref:typename:GtkWidget *
add_class_to_widget	util.c	/^void add_class_to_widget(GtkWidget* widget, char* class){$/;"	f	typeref:typename:void
address	symbols.c	/^	void* address;$/;"	m	struct:__anona45c209f0108	typeref:typename:void *	file:
application_root	globals.c	/^GtkWidget* application_root = NULL; \/\/ the first window from the application we are modifying./;"	v	typeref:typename:GtkWidget *
apply_css	util.c	/^void apply_css(char* css_string, GtkWidget* application_root){$/;"	f	typeref:typename:void
apply_css_to_widget	util.c	/^void apply_css_to_widget(GtkWidget *widget, const gchar *css_data) {$/;"	f	typeref:typename:void
build_tuxrup_window	main.c	/^void build_tuxrup_window(){$/;"	f	typeref:typename:void
callback_function_t	callbacks.c	/^typedef void(*callback_function_t)(GtkWidget*, gpointer);$/;"	t	typeref:typename:void (*)(GtkWidget *,gpointer)	file:
check_memory_allocated	util.c	/^int check_memory_allocated (void *x) $/;"	f	typeref:typename:int
contains_class	util.c	/^bool contains_class(GtkWidget* widget, char* class_name){$/;"	f	typeref:typename:bool
create_and_add_property_editor	properties.c	/^void create_and_add_property_editor(GtkWidget* vbox, GParamSpec* pspec){$/;"	f	typeref:typename:void
create_boolean_editor	properties.c	/^GtkWidget* create_boolean_editor(gchar* property_name){$/;"	f	typeref:typename:GtkWidget *
create_enum_editor	properties.c	/^GtkWidget* create_enum_editor(gchar* property_name, GType typ){$/;"	f	typeref:typename:GtkWidget *
create_number_editor	properties.c	/^GtkWidget* create_number_editor(gchar* property_name, GType number_type){$/;"	f	typeref:typename:GtkWidget *
create_overview_label	main.c	/^GtkWidget* create_overview_label(char* label_str){$/;"	f	typeref:typename:GtkWidget *
create_string_editor	properties.c	/^GtkWidget* create_string_editor(gchar* property_name){$/;"	f	typeref:typename:GtkWidget *
empty_box	util.c	/^void empty_box(GtkWidget* box){$/;"	f	typeref:typename:void
executable_name	io.c	/^char* executable_name = NULL;$/;"	v	typeref:typename:char *
executable_name_label	main.c	/^GtkWidget* executable_name_label;        $/;"	v	typeref:typename:GtkWidget *
executable_path	io.c	/^char* executable_path = NULL;$/;"	v	typeref:typename:char *
executable_path_label	main.c	/^GtkWidget* executable_path_label;        $/;"	v	typeref:typename:GtkWidget *
executable_symbols_path	io.c	/^char* executable_symbols_path = NULL;$/;"	v	typeref:typename:char *
executable_symbols_path_label	main.c	/^GtkWidget* executable_symbols_path_label;$/;"	v	typeref:typename:GtkWidget *
exit_if_false	main.c	/^bool exit_if_false(bool result, char* expected, char* got, int test_number){$/;"	f	typeref:typename:bool
find_all_modifiable_children	main.c	/^void find_all_modifiable_children(GtkWidget* widget, GList** widgets){$/;"	f	typeref:typename:void
find_all_modifiable_widgets	main.c	/^GList* find_all_modifiable_widgets(){$/;"	f	typeref:typename:GList *
function_dispatcher	callbacks.c	/^void function_dispatcher(GtkWidget* widget, gpointer data){$/;"	f	typeref:typename:void
g_signal_connect_data	main.c	/^gulong g_signal_connect_data(gpointer instance,$/;"	f	typeref:typename:gulong
g_signal_connect_data_original	globals.c	/^g_signal_connect_data_t g_signal_connect_data_original = NULL;$/;"	v	typeref:typename:g_signal_connect_data_t
g_signal_connect_data_t	globals.h	/^typedef gulong (*g_signal_connect_data_t)(gpointer instance,$/;"	t	typeref:typename:gulong (*)(gpointer instance,const gchar * detailed_signal,GCallback c_handler,gpointer data,GClosureNotify destroy_data,GConnectFlags connect_flags)
get_base_address	symbols.c	/^void *get_base_address()$/;"	f	typeref:typename:void *
get_current_value	properties.c	/^GValue get_current_value(gchar* property_name, GType value_type){$/;"	f	typeref:typename:GValue
get_document_path	callbacks.c	/^char* get_document_path(char* function_name){$/;"	f	typeref:typename:char *
get_executable_name	io.c	/^char* get_executable_name(){$/;"	f	typeref:typename:char *
get_executable_path	io.c	/^char* get_executable_path(){$/;"	f	typeref:typename:char *
get_executable_symbols_path	io.c	/^char* get_executable_symbols_path(){$/;"	f	typeref:typename:char *
get_main_symbols	symbols.c	/^GHashTable* get_main_symbols(){$/;"	f	typeref:typename:GHashTable *
get_original_function_pointer	util.c	/^gpointer* get_original_function_pointer(char* name){$/;"	f	typeref:typename:gpointer *
get_program_src_folder	io.c	/^char* get_program_src_folder(){$/;"	f	typeref:typename:char *
get_text_from_buffer	util.c	/^char* get_text_from_buffer(GtkTextBuffer *buffer){$/;"	f	typeref:typename:char *
get_widget_label	util.c	/^char* get_widget_label(GtkWidget* widget){$/;"	f	typeref:typename:char *
get_widget_type_string	util.c	/^char* get_widget_type_string(GtkWidget* widget){$/;"	f	typeref:typename:char *
get_working_directory	io.c	/^char* get_working_directory(){$/;"	f	typeref:typename:char *
gtk_widget_show_all	main.c	/^void gtk_widget_show_all(GtkWidget *widget)$/;"	f	typeref:typename:void
gtk_widget_show_all_original	main.c	/^gtk_widget_show_all_t gtk_widget_show_all_original;$/;"	v	typeref:typename:gtk_widget_show_all_t
gtk_widget_show_all_t	main.c	/^typedef void(*gtk_widget_show_all_t)(GtkWidget*);$/;"	t	typeref:typename:void (*)(GtkWidget *)	file:
identifier_from_pointer	symbols.c	/^char* identifier_from_pointer(void* pointer){$/;"	f	typeref:typename:char *
identifiers_to_pointers_map	symbols.c	/^GHashTable* identifiers_to_pointers_map = NULL;$/;"	v	typeref:typename:GHashTable *
init	main.c	/^void init(){$/;"	f	typeref:typename:void
initialized	main.c	/^bool initialized = false;$/;"	v	typeref:typename:bool
is_pie_executable	symbols.c	/^bool is_pie_executable()$/;"	f	typeref:typename:bool
is_variable	symbols.c	/^bool is_variable(char symbol_type){$/;"	f	typeref:typename:bool
jump	util.c	/^jmp_buf jump;$/;"	v	typeref:typename:jmp_buf
make_scrolled_window	util.c	/^GtkWidget* make_scrolled_window(int width, int height){$/;"	f	typeref:typename:GtkWidget *
make_widget_customizable	main.c	/^void make_widget_customizable(GtkWidget* widget){$/;"	f	typeref:typename:void
observed_type	main.c	/^bool observed_type(GtkWidget* widget){$/;"	f	typeref:typename:bool
on_callback_done	callbacks.c	/^void on_callback_done(GtkWidget* widget, GtkTextBuffer* buffer){$/;"	f	typeref:typename:void
on_callback_edit	callbacks.c	/^void on_callback_edit(GtkWidget* widget, GtkTextBuffer* buffer){$/;"	f	typeref:typename:void
on_check_button_changed	properties.c	/^void on_check_button_changed(GtkCheckButton* check_button, gpointer user_data){$/;"	f	typeref:typename:void
on_done_clicked	css.c	/^void on_done_clicked(GtkWidget *widget, gpointer user_data)$/;"	f	typeref:typename:void
on_dropdown_menu_changed	properties.c	/^void on_dropdown_menu_changed(GtkComboBox* dropdown, GParamSpec* pspec, gpointer user_data){$/;"	f	typeref:typename:void
on_edit_properties	properties.c	/^void on_edit_properties(GtkWidget* widget, gpointer user_data){$/;"	f	typeref:typename:void
on_load	css.c	/^void on_load(GtkWidget *widget, gpointer user_data) {$/;"	f	typeref:typename:void
on_new_clicked_t	main.c	/^	typedef void(*on_new_clicked_t)(GtkWidget*, gpointer);$/;"	t	function:tuxrup_test_pointer_name_conversion	typeref:typename:void (*)(GtkWidget *,gpointer)	file:
on_spin_button_changed	properties.c	/^void on_spin_button_changed(GtkSpinButton* spin_button, gpointer user_data){$/;"	f	typeref:typename:void
on_text_entry_changed	properties.c	/^void on_text_entry_changed(GtkEntry* entry, gpointer user_data){$/;"	f	typeref:typename:void
on_widget_click	main.c	/^gboolean on_widget_click(GtkWidget* widget, GdkEventButton* event, gpointer user_data){$/;"	f	typeref:typename:gboolean
on_widget_right_click	main.c	/^void on_widget_right_click(GtkWidget* widget){$/;"	f	typeref:typename:void
pointer_from_identifier	symbols.c	/^char* pointer_from_identifier(char* identifier){$/;"	f	typeref:typename:char *
pointers_to_identifiers_map	symbols.c	/^GHashTable* pointers_to_identifiers_map = NULL; $/;"	v	typeref:typename:GHashTable *
post_init	main.c	/^void post_init(){$/;"	f	typeref:typename:void
pre_init	main.c	/^void pre_init(){$/;"	f	typeref:typename:void
program_src_folder	io.c	/^char* program_src_folder = NULL;$/;"	v	typeref:typename:char *
program_src_folder_label	main.c	/^GtkWidget* program_src_folder_label;    $/;"	v	typeref:typename:GtkWidget *
read_file	callbacks.c	/^char* read_file(char* filepath){$/;"	f	typeref:typename:char *
refresh_button	main.c	/^GtkWidget* refresh_button;$/;"	v	typeref:typename:GtkWidget *
refresh_symbols_overview	main.c	/^void refresh_symbols_overview(){$/;"	f	typeref:typename:void
refresh_tuxrup_window	main.c	/^void refresh_tuxrup_window(){$/;"	f	typeref:typename:void
refresh_widgets_overview	main.c	/^void refresh_widgets_overview(){$/;"	f	typeref:typename:void
remove_callback	callbacks.c	/^void remove_callback (GtkWidget* w, char* callback_name){$/;"	f	typeref:typename:void
remove_class_from_widget	util.c	/^void remove_class_from_widget(GtkWidget* widget, char* class){$/;"	f	typeref:typename:void
segv	util.c	/^void segv (int sig)$/;"	f	typeref:typename:void
selected_widget	globals.c	/^GtkWidget* selected_widget = NULL; \/\/the currently selected widget.$/;"	v	typeref:typename:GtkWidget *
set_value	properties.c	/^void set_value(gchar* property_name, GType value_type, gpointer new_value){$/;"	f	typeref:typename:void
shared_lib_path	callbacks.c	/^char* shared_lib_path(GtkWidget* widget){$/;"	f	typeref:typename:char *
size	symbols.c	/^	size_t size;$/;"	m	struct:__anona45c209f0108	typeref:typename:size_t	file:
source_code_paths	io.c	/^GHashTable* source_code_paths = NULL;$/;"	v	typeref:typename:GHashTable *
symbol_info	symbols.c	/^} symbol_info;$/;"	t	typeref:struct:__anona45c209f0108	file:
symbol_names	main.c	/^GtkWidget* symbol_names;$/;"	v	typeref:typename:GtkWidget *
symbol_pointers	main.c	/^GtkWidget* symbol_pointers;$/;"	v	typeref:typename:GtkWidget *
sync_variables	symbols.c	/^void sync_variables(char* shared_lib_path, void* shared_lib_dl_open_pointer, bool to_from){$/;"	f	typeref:typename:void
tuxrup_root	globals.c	/^GtkWidget* tuxrup_root = NULL; \/\/ the tuxrup window. Should remain constant.   $/;"	v	typeref:typename:GtkWidget *
tuxrup_test1	main.c	/^bool tuxrup_test1(){$/;"	f	typeref:typename:bool
tuxrup_test2	main.c	/^bool tuxrup_test2(){$/;"	f	typeref:typename:bool
tuxrup_testBangladeshLable	main.c	/^bool tuxrup_testBangladeshLable() {$/;"	f	typeref:typename:bool
tuxrup_test_pointer_name_conversion	main.c	/^bool tuxrup_test_pointer_name_conversion(){$/;"	f	typeref:typename:bool
widget_callback_function_names	main.c	/^GtkWidget* widget_callback_function_names;$/;"	v	typeref:typename:GtkWidget *
widget_callback_function_pointers	main.c	/^GtkWidget* widget_callback_function_pointers;$/;"	v	typeref:typename:GtkWidget *
widget_callback_names	main.c	/^GtkWidget* widget_callback_names;$/;"	v	typeref:typename:GtkWidget *
widget_labels	main.c	/^GtkWidget* widget_labels;$/;"	v	typeref:typename:GtkWidget *
widget_names	main.c	/^GtkWidget* widget_names;$/;"	v	typeref:typename:GtkWidget *
widget_pointers	main.c	/^GtkWidget* widget_pointers;$/;"	v	typeref:typename:GtkWidget *
widget_types	main.c	/^GtkWidget* widget_types;$/;"	v	typeref:typename:GtkWidget *
widgets_overview	main.c	/^GtkWidget* widgets_overview;$/;"	v	typeref:typename:GtkWidget *
working_directory	io.c	/^char* working_directory = NULL;$/;"	v	typeref:typename:char *
working_directory_label	main.c	/^GtkWidget* working_directory_label;      $/;"	v	typeref:typename:GtkWidget *
